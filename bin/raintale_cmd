#!python

import sys
import os
import argparse
import logging
import json

from urllib.parse import urlparse
from argparse import RawTextHelpFormatter

from yaml import load, Loader

from raintale.storytellers import storytellers, storytelling_services
from raintale.storygenerators import storygenerators

logger = logging.getLogger(__name__)

def get_logger(appname, loglevel, logfile):

    logger = logging.getLogger(appname)

    if logfile == sys.stdout:
        logging.basicConfig( 
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            level=loglevel)
    else:
        logging.basicConfig( 
            format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            level=loglevel,
            filename=logfile)

    return logger

def calculate_loglevel(verbose=False, quiet=False):
  
    # verbose trumps quiet
    if verbose:
        return logging.DEBUG

    if quiet:
        return logging.WARNING

    return logging.INFO

def process_arguments(args):

    parser = argparse.ArgumentParser(prog="{}".format(args[0]),
        description='Clusters a collection of mementos based on Simhash and slice',
        formatter_class=RawTextHelpFormatter
        )

    parser.add_argument('-i', '--input', dest='input_filename',
        required=True,
        help="An input file containing the memento URLs for use in the story."
    )

    parser.add_argument('--storyteller', dest='storyteller',
        required=True,
        help="""The service used to tell the story. Options are:
        * twitter
        * the name of an output filename
        """
    )

    parser.add_argument('--storyformat', dest='storyformat',
        required=True,
        help="""The type of surrogate to use for the story. Outputs are:
        * socialcard - a social card used by most social media platforms
        * urlonly - just a listing of URLs
        Note: the specified storyteller will use this format in different ways.
        """
    )

    parser.add_argument('--title', dest='title',
        required=False,
        help="The title used for the story."
    )

    parser.add_argument('--collection-url', dest='collection_url',
        required=False,
        help="The URL of the collection from which the story is derived."
    )

    parser.add_argument('--generated-by', dest='generated_by',
        required=False,
        help="The name of the algorithm or person who created this story."
    )

    parser.add_argument('--mementoembed_api', dest='mementoembed_api',
        required=True,
        help="The URL of the MementoEmbed instance used for generating surrogates"
    )

    parser.add_argument('-l', '--logfile', dest='logfile',
        default=sys.stdout,
        help="If specified, logging output will be written to this file. "
            "Otherwise, it will print to the screen."
    )

    parser.add_argument('-c', '--credentials_file', dest='credentials_file',
        required=False, default=None,
        help="The file containing the credentials needed to use a storytelling service, in YAML format."
    )

    parser.add_argument('-v', '--verbose', dest='verbose',
        action='store_true',
        help="This will raise the logging level to debug for more verbose output")

    parser.add_argument('-q', '--quiet', dest='quiet',
        action='store_true',
        help="This will lower the logging level to only show warnings or errors")

    args = parser.parse_args()

    return args

def gather_credentials(storyteller, credentials_file):

    credentials_json = {}

    if storyteller not in storytelling_services:
        credentials_json = {
            "output_filename": storyteller
        }
    else:
        
        with open(credentials_file) as f:
            credentials_json = load(f, Loader=Loader)

    return credentials_json

def format_data(input_filename, title, collection_url, generated_by):

    story_data = {}

    logger.info("reading story data from file {}".format(input_filename))

    with open(input_filename) as f:

        try:
            story_data = json.load(f)

        except json.JSONDecodeError:

            logger.warning("story data is not JSON, attempting to read as "
                "a list of memento URLs in a text file")

            f.seek(0)
            story_data['title'] = title
            
            # if collection_url is not None:
            #     logger.debug("storing given collection URL of {}".format(collection_url))
            story_data['collection_url'] = collection_url

            # if generated_by is not None:
            #     logger.debug("storing generated by value of {}".format(generated_by))
            story_data['generated_by'] = generated_by

            story_data['elements'] = []

            logger.info("set story title to {}".format(
                story_data['title']
            ))

            logger.info("creating story elements")

            for line in f:

                line = line.strip()
                o = urlparse(line)

                if o.scheme in ['http', 'https']:

                    logger.debug("adding link {} to story".format(line))

                    element = {
                        'type': 'link',
                        'value': line
                    }

                    story_data['elements'].append(element)

                else:
                    logger.warning(
                        "Skipping URL with unsupported scheme: {}".format(line)
                    )

    return story_data

def tell_story(storyteller, storyformat, story_data, mementoembed_api, 
    credentials):

    logger.info("building story with storyteller {} and format {}".format(
        storyteller, storyformat
    ))

    if storyteller not in storytelling_services:
        storyformat = "rawhtml_{}".format(storyformat)
        storyteller = "rawhtml"

    if storyteller == "blogger":
        storyformat = "rawhtml_{}".format(storyformat)

    sg = storygenerators[storyformat](mementoembed_api)
    st = storytellers[storyteller](sg, story_data, credentials)
    st.tell_story()

    return story_data

if __name__ == '__main__':

    args = process_arguments(sys.argv)

    # set up logging for the rest of the system
    logger = get_logger(
        __name__, calculate_loglevel(
            verbose=args.verbose, quiet=args.quiet), 
        args.logfile)

    logger.info("Beginning raintale to tell your story.")

    credentials = gather_credentials(args.storyteller, args.credentials_file)

    story_data = format_data(args.input_filename, args.title, args.collection_url, args.generated_by)

    story_output = tell_story(
        args.storyteller,
        args.storyformat,
        story_data,
        args.mementoembed_api,
        credentials
    )

    logger.info("Done telling your story.")
